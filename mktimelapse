#!/usr/bin/env bash

# Timelapse batch processor 
#
# Assemble timelapse videos from a series
# of images using ffmpeg and other tools.
# File operations are performed on copies
# under a randomly generated temporary 
# directory. Original images will not
# undergo any modification.
#
# progress_bar code borrowed from stackoverflow
# ASCII art from http://ascii.co.uk/art/camera
#
# Written and maintained by 
# greg.t@psw.enterprises
#

declare projectRoot
declare tmpDirectory
declare errLogFile

declare -a dependsOn
declare -a tmpFiles
declare -a exifOrient
declare -a pixelWidth
declare -a pixelHeight

function read_image_data()
{
  local file imgSize
  local -i i

  printf "\nReading image size and orientation\n"

  i=0

  for file in ${tmpFiles[@]}
  do  
    imgSize=$(identify -format '%wx%h' \
            ${projectRoot}/${tmpDirectory}/${file} 2>>${errLogFile})

    pixelWidth[${i}]=$(echo ${imgSize} | cut -d "x" -f1)
    pixelHeight[${i}]=$(echo ${imgSize} | cut -d "x" -f2)

		exifOrient[${i}]=$(jpegexiforient ${projectRoot}/${tmpDirectory}/${file})

    #exifOrient[${i}]=$(identify -verbose -format '%[EXIF:Orientation]' \
    #  ${projectRoot}/${tmpDirectory}/${file} 2>>${errLogFile} | grep -o '[0-9]*')
    
    [ $(( i++ )) -ne 0 ]

    progress_bar ${file} ${i} ${#tmpFiles[@]}
  done

  printf "\n"
}

function resize_images()
{
  local file targetSize resize
	local -i i

  printf "\nResizing image(s)\n"

  i=0

  for file in ${tmpFiles[@]}
  do

    # TODO:this feels like a hack. Isn't there a better way?
    # set target size depending on orientation
    if [ ${pixelWidth[${i}]} -gt ${pixelHeight[${i}]} ]
    then
      # Landscape 6000x4000
			targetSize="3840x2160"
      resize=">${targetSize}^" # resize format string
    else
			# Portrait 4000x6000
			targetSize="2160x3840"
      resize=">${targetSize}^"
    fi

		# Resize image to specified dimensions but preserve aspect ratio
		convert ${projectRoot}/${tmpDirectory}/${file} \
						-resize ${resize} \
						-gravity center -extent ${targetSize} \
						${projectRoot}/${tmpDirectory}/tmp_${file} 2>>${errLogFile}

    rm ${projectRoot}/${tmpDirectory}/${file}

    mv ${projectRoot}/${tmpDirectory}/tmp_${file} \
       ${projectRoot}/${tmpDirectory}/${file}

    [ $(( i++ )) -ne 0 ]

    progress_bar ${file} ${i} ${#tmpFiles[@]}

  done

  printf "\n"
}

function rotate_images()
{
  local file
	local -i i

  printf "\nRotating image(s)\n"

  i=0

  for file in ${tmpFiles[@]}
  do
		# Automatically change EXIF orientation to '1'
		exifautotran ${projectRoot}/${tmpDirectory}/${file} 2>>${errLogFile}

#   case ${exifOrient[${i}]} in
#     3)
#       jpegtran -rotate 180 ${projectRoot}/${tmpDirectory}/${file} > \
#         ${projectRoot}/${tmpDirectory}/tmp_${file} 2>>${errLogFile}
#         
#       rm ${projectRoot}/${tmpDirectory}/${file}
#
#       mv ${projectRoot}/${tmpDirectory}/tmp_${file} \
#          ${projectRoot}/${tmpDirectory}/${file}
#       ;;
#
#     6)   
#       jpegtran -rotate 90 ${projectRoot}/${tmpDirectory}/${file} > \
#         ${projectRoot}/${tmpDirectory}/tmp_${file} 2>>${errLogFile}
#         
#       rm ${projectRoot}/${tmpDirectory}/${file}
#       
#       mv ${projectRoot}/${tmpDirectory}/tmp_${file} \
#          ${projectRoot}/${tmpDirectory}/${file}
#       ;;
#
#     8)
#       jpegtran -rotate 270 ${projectRoot}/${tmpDirectory}/${file} > \
#          ${projectRoot}/${tmpDirectory}/tmp_${file} 2>>${errLogFile}
#         
#       rm ${projectRoot}/${tmpDirectory}/${file}
#       
#       mv ${projectRoot}/${tmpDirectory}/tmp_${file} \
#          ${projectRoot}/${tmpDirectory}/${file}
#       ;;
#   esac

    [ $(( i++ )) -ne 0 ]

    progress_bar ${file} ${i} ${#tmpFiles[@]}

  done

  printf "\n"
}

function copy_images()
{
  local file target srcFiles
	local -i i

	# generate time-based uuid and truncate to first 8 characters
  tmpDirectory=$(uuidgen -t | cut -f1 -d "-")
  
  # list files by newest modification time, then reverse order
  srcFiles=($(ls -tr1 *.JPG 2>/dev/null  \
           || ls -tr1 *.jpg 2>/dev/null  \
           || ls -tr1 *.JPEG 2>/dev/null \
           || ls -tr1 *.jpeg 2>/dev/null))

  if [ ${#srcFiles[@]} -eq 0 ]
  then
    printf "\nThere are no JPEG files in this directory\n" 
    return 1
  fi

  # make directory for temp files, fail nicely
  if ! $(mkdir ${tmpDirectory})
  then
    return 1
  fi

  printf "\nCopying file(s) to\n${projectRoot}/${tmpDirectory}/ \n"

  i=0
  
	for file in ${srcFiles[@]}
  do

    target="$(printf "%06d\n" ${i}).JPG"
    tmpFiles[${i}]=${target}

    # copy tmp files to tmp directory; fail nicely if something goes wrong
    if ! $(cp ${projectRoot}/${file} ${projectRoot}/${tmpDirectory}/${target})
    then
      return 1
    fi
      
    [ $(( i++ )) -ne 0 ]

    progress_bar ${target} ${i} ${#srcFiles[@]}

  done

  printf "\n"
}

function mk_timelapse()
{
  printf "\n${#tmpFiles[@]} images have been processed\n\n"
  
  read -n 1 -p "Compile timelapse video? [Yes/No] " choice

  case ${choice} in

    "y"|"Y")
      printf "\nCompiling timelapse video.. this may take a while\n"

      if ! $(ffmpeg  -r 15 -start_number 0 -i \
        ${projectRoot}/${tmpDirectory}/%06d.JPG \
        -vcodec libx264 -crf 18 -preset slow ${projectRoot}/out.mp4 \
        &>>${errLogFile})
      then
        return 1
      fi
      ;;

    "n"|"N")
      printf "\nNothing to do here..."
      return 0
      ;;

    *) # ID-10-T error case
      mk_timelapse
      ;;

  esac
}

function chk_depends()
{
  local program prog
	local -i i

  printf "\nChecking for dependencies...\n"

  i=0

	for program in ${dependsOn[@]}
  do

		if ! prog="$(type -p "${program}")" || [ -z "${program}" ]
    then
      printf "\n\nThe dependency '${program}' isn't installed!\n" 1>&2 
      return 1
    fi

    [ $(( i++ )) -ne 0 ]

    # progress_bar ${program} ${i} ${#dependsOn[@]}

  done
}

function cleanup()
{
  if [ -d ${projectRoot}/${tmpDirectory} ]
  then
    printf "\n\nCleaning up..."
    rm ${projectRoot}/${tmpDirectory}/*
    rmdir ${projectRoot}/${tmpDirectory}
  fi

  printf "\n\n"
}

function print_greeting()
{
  clear

  printf "\nTIMELAPSE BATCH PROCESSOR\n"

  printf '\n'
  printf '          .---.\n'
  printf '          |[X]|\n'
  printf '   _.==._.""""".___n__\n'
  printf '  d __ ___.-""-. _____b\n'
  printf '  |[__]  /."""".\ _   |\n'
  printf '  |     // /""\ \\\_)  |\n'
  printf '  |     \\\ \__/ //    |\n'
  printf '  | Nikon\`.__."/     |\n'
  printf '  \\=======`-..-"======/\n'
  printf '   `-----------------"   hjw\n'
}

function print_usage()
{
  printf "\nUSAGE:"
  printf "\n\t-h\t\tThis help message"
  printf "\n\t--help\n"

  exit 0
}

function progress_bar()
{
  local file fill empty
	local -i left done progress

  # Process arguments
  file=${1}
  progress=(${2}*100/${3}*100)/100
  done=(${progress}*4)/10
  left=40-$done

  # Build progressbar string lengths
  fill=$(printf "%${done}s")
  empty=$(printf "%${left}s")

  # 1.2 Build progressbar strings and print the ProgressBar line
  # 1.2.1 Output example:
  # 1.2.1.1 Progress : [########################################] 100%
  printf "\r${file}: [${fill// /\#}${empty// /-}] ${progress}%%"
}

function main()
{
  projectRoot=$(pwd)
  errLogFile="${projectRoot}/mktimelapse.error.log"
  dependsOn=('cut' 'x264' 'ffmpeg' 'convert' 'uuidgen' 'jpegtran' \
				     'exifautotran' 'jpegexiforient')

  local arg

  # start with an empty error log
  if [ -e ${errLogFile} ]
  then  
    truncate -s 0 ${errLogFile}
  fi

  if [ -z "$1" ]
  then
    print_greeting

    if chk_depends        \
      && copy_images      \
      && read_image_data  \
      && rotate_images    \
      && resize_images    \
      && mk_timelapse   \
      && cleanup
    then
      printf "Complete!\n\n"
      exit 0
    else
      printf "\nSomething went wrong, aborting...\n" 1>&2
			printf "Please refer to ${errLogFile##*/}"
      cleanup
      exit 1
    fi
  else
    for arg in $1
    do
      case $arg in

        "-h"|"--help")
          print_usage
          ;;

        *)
          printf "Invalid argument '$arg'\n"
          exit 1
          ;;

      esac
    done
  fi
}

main "$@"
